{"version":3,"sources":["single-result.js","result-list.js","search-form.js","App.js","registerServiceWorker.js","index.js"],"names":["SingleResult","href","this","props","url","target","title","description","React","Component","ResultList","results","map","result","index","key","className","SearchForm","state","searchTerm","event","setState","value","preventDefault","trim","onSearch","onSubmit","handleSubmit","bind","id","type","placeholder","onChange","handleInputChange","onClick","App","APIurl","axios","get","then","response","data","catch","err","console","log","handleSearch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.02421e28.chunk.js","sourcesContent":["import React from 'react';\n\nclass SingleResult extends React.Component {\n    render() {\n        return (\n            <li>\n                <a href= {this.props.url} target='blank'>{this.props.title}</a>\n                <p>{this.props.description}</p>\n            </li>\n        )\n    }\n}\n\nexport default SingleResult;","import React from 'react';\nimport SingleResult from './single-result';\n\nclass ResultList extends React.Component {\n    render() {\n        var results = this.props.results[1].map((result, index) => {\n            return (\n                <SingleResult key={index} title={this.props.results[1][index]} description={this.props.results[2][index]} url={this.props.results[3][index]}/>\n            );\n        });\n  \n        return (<ul className=\"out-result\">{results}</ul>);\n    }\n}\n\nexport default ResultList;","import React from 'react';\n\nclass SearchForm extends React.Component {\n\n    constructor() {\n        super();\n        this.state = {\n          searchTerm: ''\n        };\n    }\n  \n    handleInputChange(event) {\n        this.setState({\n            searchTerm: event.target.value\n        });\n    }\n  \n    handleSubmit(event) {\n        event.preventDefault();\n        let searchTerm = this.state.searchTerm.trim(); // Remove whitespace at the beginning and end.\n  \n        if (!searchTerm) { // If no search term was typed, return early and do nothing.\n            return;\n        }\n  \n        this.props.onSearch(searchTerm); // Execute callback\n        this.setState({ searchTerm: '' });\n    }\n  \n    render() {\n        return (\n            <div className=\"form-group\">\n                <form onSubmit={this.handleSubmit.bind(this)}>\n                    <input id=\"searchTerm\" className=\"input-sm\" type=\"text\" placeholder=\"Search for something...\" onChange={this.handleInputChange.bind(this)} value={this.state.searchTerm}/>\n                </form>\n                <button id=\"search\" type=\"button\" className=\"btn btn-primary\" onClick={this.handleSubmit.bind(this)}><span className=\"fa fa-search\"></span></button>\n            </div>\n        );\n    }\n}\n\nexport default SearchForm;","import React, { Component } from 'react';\nimport './App.css';\nimport ResultList from './result-list';\nimport SearchForm from './search-form';\nimport axios from 'axios';\n \nclass App extends Component {    \n  constructor() {\n    super();\n    this.state = {\n        results: [\n            '', [], [], []\n        ]\n    };\n  }\n\n  handleSearch(searchTerm) {\n    const APIurl= 'https://en.wikipedia.org/w/api.php?action=opensearch&origin=*&format=json&search='+searchTerm;\n    axios.get(APIurl)\n      .then(response=>{\n        const results = response.data;  \n        this.setState({ results });\n      })\n      .catch(err => console.log(err));\n  }\n\n  render(){\n    return(\n        <div>\n            <SearchForm onSearch={this.handleSearch.bind(this)}/>\n            <ResultList results={this.state.results}/>\n        </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('app'));\nregisterServiceWorker();\n"],"sourceRoot":""}